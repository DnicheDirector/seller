version: '3.9'

networks:
  kafka-net:
    name: kafka-net
    driver: bridge

services:
  db:
    image: 'postgres:15'
    container_name: seller-db-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB

  config-server:
    build:
      context: ../config-server
    image: config-server
    container_name: config_server
    ports:
      - "8888:8888"

  eureka:
    build:
      context: ../discovery-server
    image: discovery-server
    container_name: "eureka"
    ports:
      - "8761:8761"

  seller-system:
    build:
      context: ../seller-system
    image: seller-system
    container_name: seller-system
    ports:
      - "8070:8070"
    environment:
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
    depends_on:
      - "db"
      - "eureka"
      - "config-server"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888); do sleep 5; done;
      java -jar /seller-system.jar --spring.profiles.active=postgres-prod,prod
      "

  company-service:
    build:
      context: ../company-service
    image: company-service
    container_name: company-service
    ports:
      - "8072:8072"
    environment:
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
    depends_on:
      - "db"
      - "eureka"
      - "config-server"
      - "seller-system"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888 && nc -z seller-system 8070); do sleep 5; done;
      java -jar /company-service.jar --spring.profiles.active=postgres-prod,prod
      "

  user-transaction-service:
    build:
      context: ../user-transaction-service
    image: user-transaction-service
    container_name: user-transaction-service
    ports:
      - "8074:8074"
    environment:
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
    depends_on:
      - "db"
      - "eureka"
      - "config-server"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888); do sleep 5; done;
      java -jar /user-transaction-service.jar --spring.profiles.active=postgres-prod,prod
      "

  gateway:
    build:
      context: ../gateway
    image: gateway
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
    depends_on:
      - "eureka"
      - "config-server"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888); do sleep 5; done;
      java -jar /gateway.jar --spring.profiles.active=prod
      "

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"