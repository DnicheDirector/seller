version: '3.9'

services:
  postgres-db:
    image: 'postgres:15'
    container_name: seller-db-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - ${HOME}/seller-data/postgres-data:/var/lib/postgresql/data

  mongo-db:
    image: mongo:6.0.3-focal
    container_name: seller-mongodb
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}"
    environment:
      - MONGO_INITDB_DATABASE=$MONGO_DB_DATABASE
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_DB_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_DB_PASSWORD
    volumes:
      - ${HOME}/seller-data/mongo-data:/data/db

  config-server:
    build:
      context: ../config-server
    image: config-server
    container_name: config_server
    ports:
      - "8888:8888"

  eureka-service:
    build:
      context: ../discovery-server
    image: discovery-server
    container_name: "eureka"
    ports:
      - "8761:8761"

  seller-system:
    build:
      context: ../seller-system
    image: seller-system
    container_name: seller-system
    ports:
      - "8070:8070"
    environment:
      ZIPKIN_URL: $ZIPKIN_URL
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
      KAFKA_URL: $KAFKA_URL
      DATASOURCE_URL: $POSTGRES_JDBC_URL
      DATABASE_USERNAME: $POSTGRES_USER
      DATABASE_PASSWORD: $POSTGRES_PASSWORD
    depends_on:
      - "postgres-db"
      - "eureka-service"
      - "config-server"
      - "kafka"
      - "zipkin"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888); do sleep 5; done;
      java -jar /seller-system.jar --spring.profiles.active=postgres,prod
      "
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  company-service:
    build:
      context: ../company-service
    image: company-service
    container_name: company-service
    ports:
      - "8072:8072"
    environment:
      ZIPKIN_URL: $ZIPKIN_URL
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
      DATASOURCE_URL: $POSTGRES_JDBC_URL
      DATABASE_USERNAME: $POSTGRES_USER
      DATABASE_PASSWORD: $POSTGRES_PASSWORD
    depends_on:
      - "postgres-db"
      - "eureka-service"
      - "config-server"
      - "seller-system"
      - "zipkin"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888 && nc -z seller-system 8070); do sleep 5; done;
      java -jar /company-service.jar --spring.profiles.active=postgres,prod
      "
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  user-transaction-service:
    build:
      context: ../user-transaction-service
    image: user-transaction-service
    container_name: user-transaction-service
    ports:
      - "8074:8074"
    environment:
      ZIPKIN_URL: $ZIPKIN_URL
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
      KAFKA_URL: $KAFKA_URL
      REDIS_HOST: $REDIS_HOST
      REDIS_PORT: $REDIS_PORT
      MONGO_DB_PORT: $MONGO_DB_PORT
      MONGO_DB_HOST: $MONGO_DB_HOST
      MONGO_DB_USERNAME: $MONGO_DB_USER
      MONGO_DB_PASSWORD: $MONGO_DB_PASSWORD
      MONGO_DB_DATABASE: $MONGO_DB_DATABASE
    depends_on:
      - "mongo-db"
      - "eureka-service"
      - "config-server"
      - "kafka"
      - "redis"
      - "zipkin"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888); do sleep 5; done;
      java -jar /user-transaction-service.jar --spring.profiles.active=prod
      "
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  gateway:
    build:
      context: ../gateway
    image: gateway
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      CONFIG_SERVER_URL: $CONFIG_SERVER_URL
    depends_on:
      - "eureka-service"
      - "config-server"
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8888); do sleep 5; done;
      java -jar /gateway.jar --spring.profiles.active=prod
      "

  zookeeper:
    image: 'zookeeper:3.7.0'
    container_name: zookeeper
    restart: "no"
    ports:
      - "2181:2181"

  kafka:
    image: 'confluentinc/cp-kafka:latest-ubi8'
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - "zookeeper"

  redis:
    image: redis:7.0.5-bullseye
    ports:
      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "http.host=0.0.0.0"
      - "transport.host=127.0.0.1"
    volumes:
      - ${HOME}/seller-data/elasticsearch/data:/var/lib/elasticsearch/data:rw  # Persistence data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.2.0
    ports:
      - "25826:25826"
      - "5044:5044"
    volumes:
      - ../logstash/pipeline:/usr/share/logstash/pipeline:ro                  # Pipeline configuration
    restart: on-failure
    depends_on:
      - "elasticsearch"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.2.0
    ports:
      - "5601:5601"
    restart: on-failure
    depends_on:
      - "elasticsearch"

  filebeat:
    build:
      context: ../filebeat
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
      - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
      - ${HOME}/seller-data/filebeat/data:/usr/share/filebeat/data:rw      # Persistence data
    user: root                                                             # Allow access to log files and docker.sock
    restart: on-failure
    depends_on:
      - "logstash"

  zipkin:
    image: openzipkin/zipkin:2.24
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=http://elasticsearch:9200
    depends_on:
      - "elasticsearch"

  prometheus:
    image: prom/prometheus:v2.35.0
    ports:
      - "9090:9090"
    container_name: prometheus
    volumes:
      - ../prometheus:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'

  grafana:
    image: grafana/grafana-oss:8.5.2
    ports:
      - "3000:3000"
    container_name: grafana
    volumes:
      - ${HOME}/seller-data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_DOMAIN=localhost
    user: root